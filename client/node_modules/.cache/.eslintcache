[{"/Users/mikeagee/Dev/estimation-tool-react/client/src/index.js":"1","/Users/mikeagee/Dev/estimation-tool-react/client/src/reportWebVitals.js":"2","/Users/mikeagee/Dev/estimation-tool-react/client/src/App.js":"3","/Users/mikeagee/Dev/estimation-tool-react/client/src/context/global-state.js":"4","/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/estimations.jsx":"5","/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/addNewEstimation.jsx":"6","/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/invoices.jsx":"7","/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/estimation.jsx":"8","/Users/mikeagee/Dev/estimation-tool-react/client/src/context/currentEstimationTotal.context.js":"9","/Users/mikeagee/Dev/estimation-tool-react/client/src/data/newEstimation.js":"10","/Users/mikeagee/Dev/estimation-tool-react/client/src/data/data.js":"11","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/navigation/vertical.nav.menu.component.jsx":"12","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-block/estimation-block.component.jsx":"13","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/breadcrumb/breadcrumb.component.jsx":"14","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/search/search.component.jsx":"15","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-block/estimation.details.component.jsx":"16","/Users/mikeagee/Dev/estimation-tool-react/client/src/context/Form.context.js":"17","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-invoice/estimation.invoice.component.jsx":"18","/Users/mikeagee/Dev/estimation-tool-react/client/src/pages/detail.page.component.jsx":"19","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/initialValues/form.initial-values.js":"20","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-invoice/estimation-table.row.component.jsx":"21","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.2.component.jsx":"22","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.6.component.jsx":"23","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.3.component.jsx":"24","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.7.component.jsx":"25","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.5.component.jsx":"26","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.1.component.jsx":"27","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.8.component.jsx":"28","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.4.component.jsx":"29","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.9.component.jsx":"30","/Users/mikeagee/Dev/estimation-tool-react/client/src/constants/states.js":"31","/Users/mikeagee/Dev/estimation-tool-react/client/src/constants/application-types.js":"32"},{"size":1508,"mtime":1638211513043,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1636006309465,"results":"35","hashOfConfig":"34"},{"size":5284,"mtime":1638238630924,"results":"36","hashOfConfig":"34"},{"size":684,"mtime":1637037301700,"results":"37","hashOfConfig":"34"},{"size":305,"mtime":1636255158890,"results":"38","hashOfConfig":"34"},{"size":426,"mtime":1636254975892,"results":"39","hashOfConfig":"34"},{"size":143,"mtime":1636230633478,"results":"40","hashOfConfig":"34"},{"size":314,"mtime":1636270098803,"results":"41","hashOfConfig":"34"},{"size":217,"mtime":1637039421638,"results":"42","hashOfConfig":"34"},{"size":6051,"mtime":1637251043485,"results":"43","hashOfConfig":"34"},{"size":66181,"mtime":1637214554595,"results":"44","hashOfConfig":"34"},{"size":946,"mtime":1636671347828,"results":"45","hashOfConfig":"34"},{"size":1413,"mtime":1637210464968,"results":"46","hashOfConfig":"34"},{"size":338,"mtime":1636246277610,"results":"47","hashOfConfig":"34"},{"size":829,"mtime":1636671426529,"results":"48","hashOfConfig":"34"},{"size":1904,"mtime":1637553501279,"results":"49","hashOfConfig":"34"},{"size":252,"mtime":1637551765260,"results":"50","hashOfConfig":"34"},{"size":3852,"mtime":1637043778550,"results":"51","hashOfConfig":"34"},{"size":4470,"mtime":1637966742601,"results":"52","hashOfConfig":"34"},{"size":647,"mtime":1637790076850,"results":"53","hashOfConfig":"34"},{"size":687,"mtime":1637042919664,"results":"54","hashOfConfig":"34"},{"size":2785,"mtime":1637790076789,"results":"55","hashOfConfig":"34"},{"size":987,"mtime":1637209840719,"results":"56","hashOfConfig":"34"},{"size":2544,"mtime":1637680674712,"results":"57","hashOfConfig":"34"},{"size":987,"mtime":1637209832651,"results":"58","hashOfConfig":"34"},{"size":3670,"mtime":1637790076815,"results":"59","hashOfConfig":"34"},{"size":5286,"mtime":1637680669103,"results":"60","hashOfConfig":"34"},{"size":987,"mtime":1637209810705,"results":"61","hashOfConfig":"34"},{"size":3647,"mtime":1637681641702,"results":"62","hashOfConfig":"34"},{"size":2538,"mtime":1637638119917,"results":"63","hashOfConfig":"34"},{"size":427,"mtime":1637285352816,"results":"64","hashOfConfig":"34"},{"size":467,"mtime":1637614485543,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"jycbdq",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mikeagee/Dev/estimation-tool-react/client/src/index.js",["140"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Estimations from \"./routes/estimations\";\nimport Invoices from \"./routes/invoices\";\nimport NewEstimation from './routes/addNewEstimation';\nimport Estimation from './routes/estimation';\nimport { RecoilRoot } from 'recoil';\nimport { GlobalContext } from './context/global-state';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter>\n        <Routes>\n          <Route exact path=\"/\" element={<App />} />\n          <Route exact path=\"/estimations\" element={<Estimations />}>\n            <Route path=\":estimationId\" element={<Estimation />} />\n          </Route>\n          <Route exact path=\"/invoices\" element={<Invoices />} />\n          <Route exact path=\"/newestimation\" element={<NewEstimation />} />\n          <Route\n            path=\"*\"\n            element={\n              <main style={{ padding: \"1rem\" }}>\n                <p>There's nothing here!</p>\n              </main>\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/mikeagee/Dev/estimation-tool-react/client/src/reportWebVitals.js",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/App.js",["141"],"import React, { Component } from \"react\";\nimport EstimationBlock from \"./components/estimation-block/estimation-block.component\";\nimport \"./App.css\";\nimport \"./dashboard/dashboard.styles.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport EstimationNavigationBar from \"./components/navigation/vertical.nav.menu.component\";\nimport { CurrentEstimationTotalCost } from \"./context/currentEstimationTotal.context\";\nimport { NewEstimation } from './data/newEstimation';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      env: \"local\",\n      totalCost: 0,\n      updateName: this.updateName,\n      getTotalCost: this.getTotalCost,\n      updateTotalCost: this.updateTotalCost,\n      estimations: [\n        {\n          name: \"No Project\",\n          id: 0,\n          views: [\"landing\"],\n          general_estimate_features: [\"geolocationn\"],\n          // platform_specific_features: [\"camera\"],\n          capabilities: [\"biometrics\"],\n          media: [\"Image Optimzation\"],\n          random: [\n            {\n              ios: {\n                enabled: true,\n                hours: 20,\n              },\n            },\n          ],\n        },\n      ],\n      searchField: \"\",\n      searchButtonTitle: \"Search\",\n      filteredEstimation: [],\n      newEstimation: {\n        name: '',\n        id: 0,\n        views: [\"landing\"],\n        general_estimate_features: [\"geolocationn\"],\n        // platform_specific_features: [\"camera\"],\n        capabilities: [\"biometrics\"],\n        media: [\"Image Optimzation\"],\n      },\n    };\n  }\n\n  componentDidMount() {\n\n    this.getEstimations()\n      .then(res => this.setState({ estimations: res.estimations }))\n      .catch(err => console.log(err));\n  }\n\n  getEstimations = async () => {\n    const response = await fetch('http://localhost:1020/estimations');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    console.log(body, 'body')\n    return body;\n  };\n\n\n  // TODO: MOVE TO API LAYER\n  // getEstimations = async() => {\n  //   if (this.state.env === \"local\") {\n  //     await fetch(\"http://localhost:3001/estimations\")\n  //       .then((response) => response.json())\n  //       .then((estimations) => this.setState({ estimations: estimations }));\n  //   }\n  \n  //   if (this.state.env === \"amplify\") {\n  //     await fetch(\"estimation.json\")\n  //       .then((response) => response.json())\n  //       .then((estimations) =>\n  //         this.setState({ estimations: estimations.estimations })\n  //       );\n  //   }\n  // }\n\n  getTotalCost = () => {\n    return this.state.totalCost;\n  };\n\n  updateName = (newName) => {\n    console.log('new name', newName)\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  \n  searchEstimations = (e) => {\n    e.preventDefault();\n    if (this.state.estimations > 0) {\n      const { estimations, searchField } = this.state;\n      console.log(searchField, 'searchField');\n      const filteredEstimations = estimations.filter((estimation) =>\n      estimation.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      this.setState({ estimations: filteredEstimations });\n    }\n  };\n  \n  addNewEstimation = async (e) => {\n    const { estimations } = this.state;\n    \n    let newEstimation = {...NewEstimation}\n    newEstimation.id = estimations.length += 1\n    newEstimation.name = this.state.searchField\n\n    // TODO: MOVE THIS TO AN API LAYER\n    const response = await fetch(\"http://localhost:3001/estimations\", {\n      method: \"POST\",\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(newEstimation),\n    });\n\n    this.setState({\n      ...newEstimation\n    });\n  };\n\n  updateTotalCost = (totalCost) => {\n    console.log(totalCost, \"TOTALCOST\");\n  };\n\n  render() {\n    const { estimations, searchField } = this.state;\n    const filteredEstimations = estimations.filter((estimation) =>\n      estimation.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <CurrentEstimationTotalCost.Provider value={this.state}>\n        <div className=\"App\">\n          <EstimationNavigationBar\n            estimationsCount={filteredEstimations.length}\n            searchHandler={this.handleChange}\n            handleSubmit={\n              filteredEstimations.length > 0\n                ? this.searchEstimations\n                : this.addNewEstimation\n            }\n          />\n          <div className=\"dashboard-container\">\n            <EstimationBlock\n              className=\"dashboard-item\"\n              estimationsCount={filteredEstimations.length}\n              totalCost={this.state.totalCost}\n              updateTotalCost={this.updateTotalCost}\n              getTotalCost={this.getTotalCost}\n              updateName={this.updateName}\n              estimations={\n                filteredEstimations.length > 0\n                  ? filteredEstimations\n                  : this.state.estimations\n              }\n            ></EstimationBlock>\n          </div>\n        </div>\n      </CurrentEstimationTotalCost.Provider>\n    );\n  }\n}\n\nexport default App;\n","/Users/mikeagee/Dev/estimation-tool-react/client/src/context/global-state.js",["142"],"import React, { createContext} from 'react';\n\nconst initialState = {\n    env: \"local\",\n    totalCost: 1,\n    estimations: [\n      {\n        name: \"No Project\",\n        id: 0,\n        views: [\"landing\"],\n        general_estimate_features: [\"geolocationn\"],\n        platform_specific_features: [\"camera\"],\n        capabilities: [\"biometrics\"],\n        media: [\"Image Optimzation\"],\n        random: [\n          {\n            ios: {\n              enabled: true,\n              hours: 20,\n            },\n          },\n        ],\n      },\n    ],\n    searchField: \"\",\n    searchButtonTitle: \"Search\",\n    filteredEstimation: []\n  };\n\n  export const GlobalContext = createContext(initialState);","/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/estimations.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/addNewEstimation.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/invoices.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/routes/estimation.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/context/currentEstimationTotal.context.js",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/data/newEstimation.js",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/data/data.js",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/navigation/vertical.nav.menu.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-block/estimation-block.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/breadcrumb/breadcrumb.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/search/search.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-block/estimation.details.component.jsx",["143","144","145"],"import React, { useContext, useState } from 'react'\nimport AddEstimationWizard from '../../pages/detail.page.component';\nimport EstimationInvoice from '../estimation-invoice/estimation.invoice.component';\nimport { Button, Form } from 'react-bootstrap';\nimport { FormContext } from '../../context/Form.context';\n\nconst EstimationDetails = (props) => {\n  let rate = 225;\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [estimation, updateEstimation] = useState(props.estimation)\n  const { form } = useContext(FormContext)\n\n\n  const onClick = () => {\n    if (showEditForm) {\n      toggleEditForm(false);\n    } else {\n      toggleEditForm(true)\n    }\n  };\n\n  function toggleEditForm(showForm) {\n    setShowEditForm(showForm)\n    props.setShowStepWizard(showForm)\n  };\n\n  return (\n    <FormContext.Provider value={{form}}>\n      <div>\n        <h1>Estimate Details : {props.estimation.name} - {props.estimation.application_type}</h1>\n        <p>Total Hours: 780 : Rate: ${rate}</p>\n        <Button variant=\"primary\" onClick={onClick}>\n          {showEditForm ? 'Save Changes' : 'Edit form'}\n        </Button>\n        {/* <AddEstimationWizard getTotalCost={props.getTotalCost} updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={rate} estimation={props.estimation} /> */}\n        {showEditForm ?\n              <AddEstimationWizard\n                initialStep={1}\n                getTotalCost={props.getTotalCost}\n                updateTotalCost={props.updateTotalCost}\n                totalCost={props.totalCost}\n                rate={rate}\n                estimation={props.estimation} />\n           :\n          <EstimationInvoice getTotalCost={props.getTotalCost} updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={rate} estimation={props.estimation} />\n        }\n      </div>\n    </FormContext.Provider>\n  )\n}\n\nexport default EstimationDetails\n","/Users/mikeagee/Dev/estimation-tool-react/client/src/context/Form.context.js",["146","147"],"import React, { createContext } from \"react\";\nimport { NewEstimation } from \"../data/newEstimation\";\n\nexport const FormContext = React.createContext({\n  form: {},\n  handleChange: () => {}\n});\n\n// export const FormContext = createContext(initialState);\n","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-invoice/estimation.invoice.component.jsx",["148","149"],"import React from 'react';\nimport { Table } from 'react-bootstrap';\nimport EstimationTableRow from './estimation-table.row.component';\nimport { CurrentEstimationTotalCost } from '../../context/currentEstimationTotal.context';\n\nfunction EstimationInvoice(props) {\n    let finalCost = 0;\n    let requirements = [\n        props.estimation.views, \n        props.estimation.general_estimate_features, \n        props.estimation.capabilities, \n        props.estimation.media]\n    let featureCost = 0\n    let totalCost = props.getTotalCost();\n\n    requirements.forEach(requirement =>\n        requirement.map(field => {\n            featureCost += (field.hours * props.rate)\n\n            totalCost += (field.hours * props.rate);\n            // console.log('name', field.item, 'hours: ', field.hours, 'totalCost', (field.hours * props.rate), 'totalCost: ', totalCost);\n        }));\n    finalCost = totalCost;\n    props.updateTotalCost(finalCost);\n    return (\n        <CurrentEstimationTotalCost.Consumer>\n            {({ totalCost }) => (\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th>Function</th>\n                            <th>Description</th>\n                            <th>Hours</th>\n                            <th>Rate</th>\n\n                            <th>Line Total</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Views</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                        <EstimationTableRow updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={props.rate} dataField={props.estimation.views} />\n\n                        <tr>\n                            <td>Generic Features</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                        <EstimationTableRow updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={props.rate} dataField={props.estimation.general_estimate_features} />\n\n                        <tr>\n                            <td>Native Capabilities</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                        <EstimationTableRow updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={props.rate} dataField={props.estimation.capabilities} />\n\n                        <tr>\n                            <td>Media</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                        <EstimationTableRow updateTotalCost={props.updateTotalCost} totalCost={props.totalCost} rate={props.rate} dataField={props.estimation.media} />\n\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td>Total: ${finalCost}</td>\n                        </tr>\n\n                    </tbody>\n                </Table>\n            )}\n        </CurrentEstimationTotalCost.Consumer>\n    )\n}\n\nexport default EstimationInvoice;","/Users/mikeagee/Dev/estimation-tool-react/client/src/pages/detail.page.component.jsx",["150","151","152"],"import React, { useState, useContext } from 'react';\nimport form, { FormContext } from '../context/Form.context';\nimport AddEstimationForm1 from '../components/forms/add-estimation-form.1.component';\nimport AddEstimationForm2 from '../components/forms/add-estimation-form.2.component';\nimport AddEstimationForm3 from '../components/forms/add-estimation-form.3.component';\nimport AddEstimationForm4 from '../components/forms/add-estimation-form.4.component';\nimport AddEstimationForm5 from '../components/forms/add-estimation-form.5.component';\nimport AddEstimationForm6 from '../components/forms/add-estimation-form.6.component';\nimport AddEstimationForm7 from '../components/forms/add-estimation-form.7.component';\nimport AddEstimationForm8 from '../components/forms/add-estimation-form.8.component';\nimport AddEstimationForm9 from '../components/forms/add-estimation-form.9.component';\nimport StepWizard from 'react-step-wizard';\nimport { InitialFormValues } from '../components/forms/initialValues/form.initial-values';\n\nfunction AddEstimationWizard(props) {\n    const rate = 225;\n\n    const [form, setForm] = useState({\n        ...InitialFormValues\n    });\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        const updatedForm = {\n            ...form,\n            [name]: value\n        };\n\n        if (e.target.type === 'checkbox') {\n            updatedForm[e.target.name] = e.target.checked;\n        } else {\n            updatedForm[e.target.name] = e.target.value;\n        }\n        // console.log('form updated: ', updatedForm);\n        setForm(updatedForm);\n    }\n\n    const onStepChange = (currentStep, started, completed) => {\n        const updatedFormProgress = {\n            ...form\n        };\n\n        let latestStepCompleted = Math.max(updatedFormProgress.stepCompleted, currentStep.activeStep);\n        updatedFormProgress.stepCompleted = latestStepCompleted\n        setForm(updatedFormProgress)\n        // console.log('formProgressUpdated', updatedFormProgress);\n    }\n\n    return (\n        <FormContext.Consumer>\n            {({ form }) =>\n                < StepWizard onStepChange={onStepChange} initialStep={1} >\n                    <AddEstimationForm1\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"initialDetails\"} />\n                    <AddEstimationForm2\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                    <AddEstimationForm3\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"userManagement\"} />\n                    <AddEstimationForm4\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"media\"} />\n                    <AddEstimationForm5\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                    <AddEstimationForm6\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                    <AddEstimationForm7\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                    <AddEstimationForm8\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                    <AddEstimationForm9\n                        formValues={form}\n                        estimation={props.estimation}\n                        handleChange={handleChange}\n                        stepName={\"applicationType\"} />\n                </StepWizard>\n            }\n        </FormContext.Consumer >\n    )\n}\n\nexport default AddEstimationWizard;","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/initialValues/form.initial-values.js",["153"],"export const InitialFormValues = {\n  stepsStarted: [],\n  stepCompleted: 0,\n  projectName: \"\",\n  clientBudget: false,\n  clientName: \"\",\n  authorName: \"\",\n  clientAddress: \"\",\n  clientAddress2: \"\",\n  clientAddressCity: \"\",\n  clientAddressState: \"\",\n  clientAddressZip: \"\",\n  newOrExistingProject: \"\",\n  userHotState: true,\n  userSocialLoginOrRegistration: false,\n  userProfileRequired: false,\n  mediaSharing: false,\n  formMediaMgmt: \"\",\n  mediaUpdateFrequency: \"\",\n  formUserMediaMgmt: \"\",\n  mediaSharing: \"\",\n  contentUpdateFrequency: \"\",\n  contentManagement: \"\",\n  UserContentMgmt: \"\",\n  projectAnalytics: false,\n  projectCrashReporting: false\n};\n","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/estimation-invoice/estimation-table.row.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.2.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.6.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.3.component.jsx",["154"],"import React from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap'\n\nfunction AddEstimationForm3(props) {\n    return (\n        <>\n            <h3>User Features & Session Management</h3>\n            <Form>\n                <Row className=\"mb-3\">\n                    <Form.Group className=\"mb-3\" id=\"userMgmtFormHotState\">\n                        <Form.Check\n                            type=\"checkbox\"\n                            name=\"userHotState\"\n                            checked={props.formValues.userHotState}\n                            value={props.formValues.userHotState}\n                            defaultValue={props.formValues.userHotState}\n                            onChange={props.handleChange}\n                            label=\"Will your users need to login to interact with the application?\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"userMgmtSocialLogin\">\n                        <Form.Check\n                            type=\"checkbox\"\n                            name=\"userSocialLoginOrRegistration\"\n                            checked={props.formValues.userSocialLoginOrRegistration}\n                            value={props.formValues.userSocialLoginOrRegistration}\n                            onChange={props.handleChange}\n                            defaultValue={props.formValues.userSocialLoginOrRegistration}\n                            label=\"Will users be able to register or login with social media accounts?\" />\n                    </Form.Group>\n                    \n                    <Form.Group className=\"mb-3\" id=\"userMgmtFormProfile\">\n                        <Form.Check\n                            type=\"checkbox\"\n                            name=\"userProfileRequired\"\n                            checked={props.formValues.userProfileRequired}\n                            value={props.formValues.userProfileRequired}\n                            onChange={props.handleChange}\n                            defaultValue={props.formValues.userProfileRequired}\n                            label=\"Will users be able to manage or update their profile?\" />\n                    </Form.Group>\n                </Row>\n\n                <Button variant=\"primary\" onClick={props.previousStep}>\n                    Previous Step\n                </Button>\n\n                <Button variant=\"primary\" onClick={props.nextStep}>\n                    Next Step\n                </Button>\n            </Form>\n        </>\n    )\n}\n\nexport default AddEstimationForm3;","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.7.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.5.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.1.component.jsx",["155","156"],"import React, { useContext, useState } from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport { states } from '../../constants/states';\n\n\nfunction AddEstimationForm1(props) {\n    let stateAbreviations = states.map((state) => <option key={state}>{state}</option>);\n\n    return (\n        <Form>\n            <Row className=\"mb-3\">\n                <Form.Group as={Col} controlId=\"form-1-project-name\">\n                    <Form.Label>Project Name</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        name=\"projectName\"\n                        value={props.formValues.projectName}\n                        onChange={props.handleChange}\n                        placeholder={props.estimation.name}\n                        defaultValue={props.estimation.name} />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"form1-client-name\">\n                    <Form.Label>Client Name</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        name=\"clientName\"\n                        value={props.formValues.clientName}\n                        onChange={props.handleChange}\n                        placeholder=\"The Clients Name\" />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"form1-estimation-author-name\">\n                    <Form.Label>Estimation Author Name</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        name=\"authorName\"\n                        value={props.formValues.authorName}\n                        onChange={props.handleChange}\n                        placeholder=\"Your Name\" />\n                </Form.Group>\n            </Row>\n\n            <Form.Group className=\"mb-3\" controlId=\"form1-client-address\">\n                <Form.Label>Client Address</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    name=\"clientAddress\"\n                    value={props.formValues.clientAddress}\n                    onChange={props.handleChange}\n                    placeholder=\"1234 Main St\" />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                <Form.Label>Client Address 2</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    name=\"clientAddress2\"\n                    value={props.formValues.clientAddress2}\n                    onChange={props.handleChange}\n                    placeholder=\"Apartment, studio, or floor\" />\n            </Form.Group>\n\n            <Row className=\"mb-3\">\n                <Form.Group as={Col} controlId=\"formGridCity\">\n                    <Form.Label>City</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        name=\"clientAddressCity\"\n                        value={props.formValues.clientAddressCity}\n                        onChange={props.handleChange} />\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridState\">\n                    <Form.Label>State</Form.Label>\n                    <Form.Select\n                        type=\"select\"\n                        name=\"clientAddressState\"\n                        value={props.formValues.clientAddressState}\n                        onChange={props.handleChange}\n                        defaultValue=\"Choose...\">\n                        <option>Choose...</option>\n                        {stateAbreviations}\n                    </Form.Select>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formGridZip\">\n                    <Form.Label>Zip</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        name=\"clientAddressZip\"\n                        value={props.formValues.clientAddressZip}\n                        onChange={props.handleChange}\n                    />\n                </Form.Group>\n            </Row>\n\n            <Form.Group as={Col} controlId=\"formGridNewOrExisting\">\n                    <Form.Label>Is this a new or existing project?</Form.Label>\n                    <Form.Select\n                        type=\"select\"\n                        name=\"newOrExistingProject\"\n                        value={props.formValues.newOrExistingProject}\n                        onChange={props.handleChange}\n                        defaultValue=\"Choose...\">\n                        <option>Choose...</option>\n                        <option>New</option>\n                        <option>Existing</option>\n                    </Form.Select>\n                </Form.Group>\n\n            <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                <Form.Check \n                type=\"checkbox\" \n                name=\"clientBudget\"\n                checked={props.formValues.clientBudget}\n                onChange={props.handleChange}\n                value={props.formValues.clientBudget}\n                label=\"Did the client give a budget estimation?\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" onClick={props.nextStep}>\n                Next Step\n            </Button>\n        </Form>\n    )\n}\n\nexport default AddEstimationForm1;","/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.8.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.4.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/components/forms/add-estimation-form.9.component.jsx",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/constants/states.js",[],"/Users/mikeagee/Dev/estimation-tool-react/client/src/constants/application-types.js",[],{"ruleId":"157","severity":1,"message":"158","line":12,"column":10,"nodeType":"159","messageId":"160","endLine":12,"endColumn":23},{"ruleId":"157","severity":1,"message":"161","line":122,"column":11,"nodeType":"159","messageId":"160","endLine":122,"endColumn":19},{"ruleId":"157","severity":1,"message":"162","line":1,"column":8,"nodeType":"159","messageId":"160","endLine":1,"endColumn":13},{"ruleId":"157","severity":1,"message":"163","line":4,"column":18,"nodeType":"159","messageId":"160","endLine":4,"endColumn":22},{"ruleId":"157","severity":1,"message":"164","line":10,"column":10,"nodeType":"159","messageId":"160","endLine":10,"endColumn":20},{"ruleId":"157","severity":1,"message":"165","line":10,"column":22,"nodeType":"159","messageId":"160","endLine":10,"endColumn":38},{"ruleId":"157","severity":1,"message":"166","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":30},{"ruleId":"157","severity":1,"message":"167","line":2,"column":10,"nodeType":"159","messageId":"160","endLine":2,"endColumn":23},{"ruleId":"157","severity":1,"message":"168","line":13,"column":9,"nodeType":"159","messageId":"160","endLine":13,"endColumn":20},{"ruleId":"169","severity":1,"message":"170","line":17,"column":31,"nodeType":"171","messageId":"172","endLine":17,"endColumn":33},{"ruleId":"157","severity":1,"message":"173","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":37},{"ruleId":"157","severity":1,"message":"174","line":2,"column":8,"nodeType":"159","messageId":"160","endLine":2,"endColumn":12},{"ruleId":"157","severity":1,"message":"175","line":16,"column":11,"nodeType":"159","messageId":"160","endLine":16,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":21,"column":3,"nodeType":"178","messageId":"179","endLine":21,"endColumn":15},{"ruleId":"157","severity":1,"message":"180","line":2,"column":21,"nodeType":"159","messageId":"160","endLine":2,"endColumn":24},{"ruleId":"157","severity":1,"message":"173","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":27},{"ruleId":"157","severity":1,"message":"181","line":1,"column":29,"nodeType":"159","messageId":"160","endLine":1,"endColumn":37},"no-unused-vars","'GlobalContext' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'React' is defined but never used.","'Form' is defined but never used.","'estimation' is assigned a value but never used.","'updateEstimation' is assigned a value but never used.","'createContext' is defined but never used.","'NewEstimation' is defined but never used.","'featureCost' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useContext' is defined but never used.","'form' is defined but never used.","'rate' is assigned a value but never used.","no-dupe-keys","Duplicate key 'mediaSharing'.","ObjectExpression","unexpected","'Col' is defined but never used.","'useState' is defined but never used."]